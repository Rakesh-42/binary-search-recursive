#include <stdio.h>
#include <stdlib.h>
struct node
{
int data;
struct node*left,*right;
};
struct node*create(int,struct node *);
void preorder(struct node*);
struct node*search(int,struct node *);
int main()
{
	struct node*t=NULL;
	int ele,f,ch;
	printf("1.creation\n2.preorder\n3.search\n");
	do
	{
		printf("enter choice:");
		scanf("%d",&ch);
		switch(ch)
		{
		case 1:printf("enter element:");
			   scanf("%d",&ele);
	           t=create(ele,t);
			   break;
		case 2:printf("preorder of given array:");
			preorder(t);
			break;
	    case 3:printf("enter element:");
			  scanf("%d",&ele);
			  f=search(ele,t);
			  if(f==1)
		      printf("element found\n");
			  else
			  printf("element not found\n");
			  break;
	   default :printf("choose correct choice\n");
			}
			printf("\n");
			}
			while(ch<4);
			}
	struct node*create(int ele,struct node*t)
	{
	struct node*p;
	p=(struct node*)malloc(sizeof(struct node));
	p->data=ele;
	p->left=NULL;
	p->right=NULL;
	if(t==NULL)
	t=p;
	else
	{
	if(t->data<ele)
	t->right=create(ele,t->right);
	else if(t->data>ele)
	t->left=create(ele,t->left);
	else
	printf("duplication not allowed\n");
	}
	return t;
	}
	void preorder(struct node*t)
	{
	if(t!=NULL)
	{
	printf("%d->",t->data);
	preorder(t->left);
	preorder(t->right);
	}
	}
	struct node*search(int ele,struct node*t)
	{
	if(t==NULL)
	return 0;
	else
	{
	if(t->data==ele)
	return 1;
	else if(t->data<ele)
	return(search(ele,t->right));
	else
	return(search(ele,t->left));
	}
	}
